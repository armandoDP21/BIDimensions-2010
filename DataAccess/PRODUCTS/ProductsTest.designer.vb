'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Financial_Interfaces")>  _
Partial Public Class ProductsTestDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertM01_Product(instance As M01_Product)
    End Sub
  Partial Private Sub UpdateM01_Product(instance As M01_Product)
    End Sub
  Partial Private Sub DeleteM01_Product(instance As M01_Product)
    End Sub
  Partial Private Sub InsertD01_PRODUCT(instance As D01_PRODUCT)
    End Sub
  Partial Private Sub UpdateD01_PRODUCT(instance As D01_PRODUCT)
    End Sub
  Partial Private Sub DeleteD01_PRODUCT(instance As D01_PRODUCT)
    End Sub
  Partial Private Sub InsertProducts_DM(instance As Products_DM)
    End Sub
  Partial Private Sub UpdateProducts_DM(instance As Products_DM)
    End Sub
  Partial Private Sub DeleteProducts_DM(instance As Products_DM)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.My.MySettings.Default.Financial_InterfacesConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property M01_Products() As System.Data.Linq.Table(Of M01_Product)
		Get
			Return Me.GetTable(Of M01_Product)
		End Get
	End Property
	
	Public ReadOnly Property D01_PRODUCTs() As System.Data.Linq.Table(Of D01_PRODUCT)
		Get
			Return Me.GetTable(Of D01_PRODUCT)
		End Get
	End Property
	
	Public ReadOnly Property Products_DMs() As System.Data.Linq.Table(Of Products_DM)
		Get
			Return Me.GetTable(Of Products_DM)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.M01_Products")>  _
Partial Public Class M01_Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductKey As Integer
	
	Private _CountryID As String
	
	Private _ProductID As String
	
	Private _SAP_ProductCode As String
	
	Private _Description As String
	
	Private _Grams As System.Nullable(Of Decimal)
	
	Private _Standar_Cost As System.Nullable(Of Decimal)
	
	Private _PricePoint As System.Nullable(Of Decimal)
	
	Private _UnitsPerCase As System.Nullable(Of Decimal)
	
	Private _PresentationID As System.Nullable(Of Integer)
	
	Private _GroupID As System.Nullable(Of Integer)
	
	Private _SourceID As System.Nullable(Of Integer)
	
	Private _CategoryID As System.Nullable(Of Integer)
	
	Private _SubCategoryID As System.Nullable(Of Integer)
	
	Private _BrandID As System.Nullable(Of Integer)
	
	Private _SubBrandID As System.Nullable(Of Integer)
	
	Private _TypeBrandID As System.Nullable(Of Integer)
	
	Private _SizeID As System.Nullable(Of Integer)
	
	Private _FlavorID As System.Nullable(Of Integer)
	
	Private _Active_Flag As System.Nullable(Of Boolean)
	
	Private _SystemOnly As System.Nullable(Of Boolean)
	
	Private _Flag_innovation As System.Nullable(Of Boolean)
	
	Private _StartDate_innovation As System.Nullable(Of Date)
	
	Private _EndDate_innovation As System.Nullable(Of Date)
	
	Private _POT_StatusID As System.Nullable(Of Integer)
	
	Private _UnitsForDistribution As System.Nullable(Of Decimal)
	
	Private _TypeSalesID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductKeyChanged()
    End Sub
    Partial Private Sub OnCountryIDChanging(value As String)
    End Sub
    Partial Private Sub OnCountryIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As String)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnSAP_ProductCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSAP_ProductCodeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnGramsChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnGramsChanged()
    End Sub
    Partial Private Sub OnStandar_CostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnStandar_CostChanged()
    End Sub
    Partial Private Sub OnPricePointChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPricePointChanged()
    End Sub
    Partial Private Sub OnUnitsPerCaseChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUnitsPerCaseChanged()
    End Sub
    Partial Private Sub OnPresentationIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPresentationIDChanged()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnSourceIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSourceIDChanged()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnSubCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubCategoryIDChanged()
    End Sub
    Partial Private Sub OnBrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBrandIDChanged()
    End Sub
    Partial Private Sub OnSubBrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubBrandIDChanged()
    End Sub
    Partial Private Sub OnTypeBrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeBrandIDChanged()
    End Sub
    Partial Private Sub OnSizeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSizeIDChanged()
    End Sub
    Partial Private Sub OnFlavorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFlavorIDChanged()
    End Sub
    Partial Private Sub OnActive_FlagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActive_FlagChanged()
    End Sub
    Partial Private Sub OnSystemOnlyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSystemOnlyChanged()
    End Sub
    Partial Private Sub OnFlag_innovationChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnFlag_innovationChanged()
    End Sub
    Partial Private Sub OnStartDate_innovationChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDate_innovationChanged()
    End Sub
    Partial Private Sub OnEndDate_innovationChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDate_innovationChanged()
    End Sub
    Partial Private Sub OnPOT_StatusIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPOT_StatusIDChanged()
    End Sub
    Partial Private Sub OnUnitsForDistributionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUnitsForDistributionChanged()
    End Sub
    Partial Private Sub OnTypeSalesIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeSalesIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductKey", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ProductKey() As Integer
		Get
			Return Me._ProductKey
		End Get
		Set
			If ((Me._ProductKey = value)  _
						= false) Then
				Me.OnProductKeyChanging(value)
				Me.SendPropertyChanging
				Me._ProductKey = value
				Me.SendPropertyChanged("ProductKey")
				Me.OnProductKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryID", DbType:="VarChar(2)")>  _
	Public Property CountryID() As String
		Get
			Return Me._CountryID
		End Get
		Set
			If (String.Equals(Me._CountryID, value) = false) Then
				Me.OnCountryIDChanging(value)
				Me.SendPropertyChanging
				Me._CountryID = value
				Me.SendPropertyChanged("CountryID")
				Me.OnCountryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="VarChar(10)")>  _
	Public Property ProductID() As String
		Get
			Return Me._ProductID
		End Get
		Set
			If (String.Equals(Me._ProductID, value) = false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SAP_ProductCode", DbType:="VarChar(15)")>  _
	Public Property SAP_ProductCode() As String
		Get
			Return Me._SAP_ProductCode
		End Get
		Set
			If (String.Equals(Me._SAP_ProductCode, value) = false) Then
				Me.OnSAP_ProductCodeChanging(value)
				Me.SendPropertyChanging
				Me._SAP_ProductCode = value
				Me.SendPropertyChanged("SAP_ProductCode")
				Me.OnSAP_ProductCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(100)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Grams", DbType:="Decimal(8,4)")>  _
	Public Property Grams() As System.Nullable(Of Decimal)
		Get
			Return Me._Grams
		End Get
		Set
			If (Me._Grams.Equals(value) = false) Then
				Me.OnGramsChanging(value)
				Me.SendPropertyChanging
				Me._Grams = value
				Me.SendPropertyChanged("Grams")
				Me.OnGramsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Standar_Cost", DbType:="Money")>  _
	Public Property Standar_Cost() As System.Nullable(Of Decimal)
		Get
			Return Me._Standar_Cost
		End Get
		Set
			If (Me._Standar_Cost.Equals(value) = false) Then
				Me.OnStandar_CostChanging(value)
				Me.SendPropertyChanging
				Me._Standar_Cost = value
				Me.SendPropertyChanged("Standar_Cost")
				Me.OnStandar_CostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PricePoint", DbType:="Money")>  _
	Public Property PricePoint() As System.Nullable(Of Decimal)
		Get
			Return Me._PricePoint
		End Get
		Set
			If (Me._PricePoint.Equals(value) = false) Then
				Me.OnPricePointChanging(value)
				Me.SendPropertyChanging
				Me._PricePoint = value
				Me.SendPropertyChanged("PricePoint")
				Me.OnPricePointChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsPerCase", DbType:="Decimal(5,0)")>  _
	Public Property UnitsPerCase() As System.Nullable(Of Decimal)
		Get
			Return Me._UnitsPerCase
		End Get
		Set
			If (Me._UnitsPerCase.Equals(value) = false) Then
				Me.OnUnitsPerCaseChanging(value)
				Me.SendPropertyChanging
				Me._UnitsPerCase = value
				Me.SendPropertyChanged("UnitsPerCase")
				Me.OnUnitsPerCaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PresentationID", DbType:="Int")>  _
	Public Property PresentationID() As System.Nullable(Of Integer)
		Get
			Return Me._PresentationID
		End Get
		Set
			If (Me._PresentationID.Equals(value) = false) Then
				Me.OnPresentationIDChanging(value)
				Me.SendPropertyChanging
				Me._PresentationID = value
				Me.SendPropertyChanged("PresentationID")
				Me.OnPresentationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="Int")>  _
	Public Property GroupID() As System.Nullable(Of Integer)
		Get
			Return Me._GroupID
		End Get
		Set
			If (Me._GroupID.Equals(value) = false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceID", DbType:="Int")>  _
	Public Property SourceID() As System.Nullable(Of Integer)
		Get
			Return Me._SourceID
		End Get
		Set
			If (Me._SourceID.Equals(value) = false) Then
				Me.OnSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceID = value
				Me.SendPropertyChanged("SourceID")
				Me.OnSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int")>  _
	Public Property CategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._CategoryID
		End Get
		Set
			If (Me._CategoryID.Equals(value) = false) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubCategoryID", DbType:="Int")>  _
	Public Property SubCategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._SubCategoryID
		End Get
		Set
			If (Me._SubCategoryID.Equals(value) = false) Then
				Me.OnSubCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._SubCategoryID = value
				Me.SendPropertyChanged("SubCategoryID")
				Me.OnSubCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandID", DbType:="Int")>  _
	Public Property BrandID() As System.Nullable(Of Integer)
		Get
			Return Me._BrandID
		End Get
		Set
			If (Me._BrandID.Equals(value) = false) Then
				Me.OnBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._BrandID = value
				Me.SendPropertyChanged("BrandID")
				Me.OnBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubBrandID", DbType:="Int")>  _
	Public Property SubBrandID() As System.Nullable(Of Integer)
		Get
			Return Me._SubBrandID
		End Get
		Set
			If (Me._SubBrandID.Equals(value) = false) Then
				Me.OnSubBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._SubBrandID = value
				Me.SendPropertyChanged("SubBrandID")
				Me.OnSubBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeBrandID", DbType:="Int")>  _
	Public Property TypeBrandID() As System.Nullable(Of Integer)
		Get
			Return Me._TypeBrandID
		End Get
		Set
			If (Me._TypeBrandID.Equals(value) = false) Then
				Me.OnTypeBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._TypeBrandID = value
				Me.SendPropertyChanged("TypeBrandID")
				Me.OnTypeBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeID", DbType:="Int")>  _
	Public Property SizeID() As System.Nullable(Of Integer)
		Get
			Return Me._SizeID
		End Get
		Set
			If (Me._SizeID.Equals(value) = false) Then
				Me.OnSizeIDChanging(value)
				Me.SendPropertyChanging
				Me._SizeID = value
				Me.SendPropertyChanged("SizeID")
				Me.OnSizeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlavorID", DbType:="Int")>  _
	Public Property FlavorID() As System.Nullable(Of Integer)
		Get
			Return Me._FlavorID
		End Get
		Set
			If (Me._FlavorID.Equals(value) = false) Then
				Me.OnFlavorIDChanging(value)
				Me.SendPropertyChanging
				Me._FlavorID = value
				Me.SendPropertyChanged("FlavorID")
				Me.OnFlavorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active_Flag", DbType:="Bit")>  _
	Public Property Active_Flag() As System.Nullable(Of Boolean)
		Get
			Return Me._Active_Flag
		End Get
		Set
			If (Me._Active_Flag.Equals(value) = false) Then
				Me.OnActive_FlagChanging(value)
				Me.SendPropertyChanging
				Me._Active_Flag = value
				Me.SendPropertyChanged("Active_Flag")
				Me.OnActive_FlagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemOnly", DbType:="Bit")>  _
	Public Property SystemOnly() As System.Nullable(Of Boolean)
		Get
			Return Me._SystemOnly
		End Get
		Set
			If (Me._SystemOnly.Equals(value) = false) Then
				Me.OnSystemOnlyChanging(value)
				Me.SendPropertyChanging
				Me._SystemOnly = value
				Me.SendPropertyChanged("SystemOnly")
				Me.OnSystemOnlyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Flag_innovation", DbType:="Bit")>  _
	Public Property Flag_innovation() As System.Nullable(Of Boolean)
		Get
			Return Me._Flag_innovation
		End Get
		Set
			If (Me._Flag_innovation.Equals(value) = false) Then
				Me.OnFlag_innovationChanging(value)
				Me.SendPropertyChanging
				Me._Flag_innovation = value
				Me.SendPropertyChanged("Flag_innovation")
				Me.OnFlag_innovationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate_innovation", DbType:="DateTime")>  _
	Public Property StartDate_innovation() As System.Nullable(Of Date)
		Get
			Return Me._StartDate_innovation
		End Get
		Set
			If (Me._StartDate_innovation.Equals(value) = false) Then
				Me.OnStartDate_innovationChanging(value)
				Me.SendPropertyChanging
				Me._StartDate_innovation = value
				Me.SendPropertyChanged("StartDate_innovation")
				Me.OnStartDate_innovationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate_innovation", DbType:="DateTime")>  _
	Public Property EndDate_innovation() As System.Nullable(Of Date)
		Get
			Return Me._EndDate_innovation
		End Get
		Set
			If (Me._EndDate_innovation.Equals(value) = false) Then
				Me.OnEndDate_innovationChanging(value)
				Me.SendPropertyChanging
				Me._EndDate_innovation = value
				Me.SendPropertyChanged("EndDate_innovation")
				Me.OnEndDate_innovationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POT_StatusID", DbType:="Int")>  _
	Public Property POT_StatusID() As System.Nullable(Of Integer)
		Get
			Return Me._POT_StatusID
		End Get
		Set
			If (Me._POT_StatusID.Equals(value) = false) Then
				Me.OnPOT_StatusIDChanging(value)
				Me.SendPropertyChanging
				Me._POT_StatusID = value
				Me.SendPropertyChanged("POT_StatusID")
				Me.OnPOT_StatusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsForDistribution", DbType:="Decimal(5,0)")>  _
	Public Property UnitsForDistribution() As System.Nullable(Of Decimal)
		Get
			Return Me._UnitsForDistribution
		End Get
		Set
			If (Me._UnitsForDistribution.Equals(value) = false) Then
				Me.OnUnitsForDistributionChanging(value)
				Me.SendPropertyChanging
				Me._UnitsForDistribution = value
				Me.SendPropertyChanged("UnitsForDistribution")
				Me.OnUnitsForDistributionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeSalesID", DbType:="Int")>  _
	Public Property TypeSalesID() As System.Nullable(Of Integer)
		Get
			Return Me._TypeSalesID
		End Get
		Set
			If (Me._TypeSalesID.Equals(value) = false) Then
				Me.OnTypeSalesIDChanging(value)
				Me.SendPropertyChanging
				Me._TypeSalesID = value
				Me.SendPropertyChanged("TypeSalesID")
				Me.OnTypeSalesIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.D01_PRODUCTS")>  _
Partial Public Class D01_PRODUCT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductKey As Integer
	
	Private _CountryID As String
	
	Private _ProductID As String
	
	Private _SAP_ProductCode As String
	
	Private _Description As String
	
	Private _UnitsPerCase As System.Nullable(Of Decimal)
	
	Private _PresentationID As System.Nullable(Of Integer)
	
	Private _PresentationName As String
	
	Private _GroupID As System.Nullable(Of Integer)
	
	Private _GroupName As String
	
	Private _SourceID As System.Nullable(Of Integer)
	
	Private _SourceName As String
	
	Private _CategoryID As System.Nullable(Of Integer)
	
	Private _CategoryName As String
	
	Private _SubCategoryID As System.Nullable(Of Integer)
	
	Private _SubCategoryName As String
	
	Private _BrandID As System.Nullable(Of Integer)
	
	Private _BrandName As String
	
	Private _SubBrandID As System.Nullable(Of Integer)
	
	Private _SubBrandName As String
	
	Private _TypeBrandID As System.Nullable(Of Integer)
	
	Private _TypeBrandName As String
	
	Private _SizeID As System.Nullable(Of Integer)
	
	Private _SizeName As String
	
	Private _FlavorID As System.Nullable(Of Integer)
	
	Private _FlavorName As String
	
	Private _Active_Flag As System.Nullable(Of Boolean)
	
	Private _SystemOnly As System.Nullable(Of Boolean)
	
	Private _Flag_innovation As System.Nullable(Of Boolean)
	
	Private _StartDate_innovation As System.Nullable(Of Date)
	
	Private _EndDate_innovation As System.Nullable(Of Date)
	
	Private _PricePoint As System.Nullable(Of Decimal)
	
	Private _POT_StatusID As System.Nullable(Of Integer)
	
	Private _UnitsForDistribution As System.Nullable(Of Decimal)
	
	Private _TypeSalesID As System.Nullable(Of Integer)
	
	Private _TypeSalesName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductKeyChanged()
    End Sub
    Partial Private Sub OnCountryIDChanging(value As String)
    End Sub
    Partial Private Sub OnCountryIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As String)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnSAP_ProductCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSAP_ProductCodeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnUnitsPerCaseChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUnitsPerCaseChanged()
    End Sub
    Partial Private Sub OnPresentationIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPresentationIDChanged()
    End Sub
    Partial Private Sub OnPresentationNameChanging(value As String)
    End Sub
    Partial Private Sub OnPresentationNameChanged()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    Partial Private Sub OnSourceIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSourceIDChanged()
    End Sub
    Partial Private Sub OnSourceNameChanging(value As String)
    End Sub
    Partial Private Sub OnSourceNameChanged()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    Partial Private Sub OnSubCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubCategoryIDChanged()
    End Sub
    Partial Private Sub OnSubCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnSubCategoryNameChanged()
    End Sub
    Partial Private Sub OnBrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBrandIDChanged()
    End Sub
    Partial Private Sub OnBrandNameChanging(value As String)
    End Sub
    Partial Private Sub OnBrandNameChanged()
    End Sub
    Partial Private Sub OnSubBrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubBrandIDChanged()
    End Sub
    Partial Private Sub OnSubBrandNameChanging(value As String)
    End Sub
    Partial Private Sub OnSubBrandNameChanged()
    End Sub
    Partial Private Sub OnTypeBrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeBrandIDChanged()
    End Sub
    Partial Private Sub OnTypeBrandNameChanging(value As String)
    End Sub
    Partial Private Sub OnTypeBrandNameChanged()
    End Sub
    Partial Private Sub OnSizeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSizeIDChanged()
    End Sub
    Partial Private Sub OnSizeNameChanging(value As String)
    End Sub
    Partial Private Sub OnSizeNameChanged()
    End Sub
    Partial Private Sub OnFlavorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFlavorIDChanged()
    End Sub
    Partial Private Sub OnFlavorNameChanging(value As String)
    End Sub
    Partial Private Sub OnFlavorNameChanged()
    End Sub
    Partial Private Sub OnActive_FlagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActive_FlagChanged()
    End Sub
    Partial Private Sub OnSystemOnlyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSystemOnlyChanged()
    End Sub
    Partial Private Sub OnFlag_innovationChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnFlag_innovationChanged()
    End Sub
    Partial Private Sub OnStartDate_innovationChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDate_innovationChanged()
    End Sub
    Partial Private Sub OnEndDate_innovationChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDate_innovationChanged()
    End Sub
    Partial Private Sub OnPricePointChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPricePointChanged()
    End Sub
    Partial Private Sub OnPOT_StatusIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPOT_StatusIDChanged()
    End Sub
    Partial Private Sub OnUnitsForDistributionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUnitsForDistributionChanged()
    End Sub
    Partial Private Sub OnTypeSalesIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeSalesIDChanged()
    End Sub
    Partial Private Sub OnTypeSalesNameChanging(value As String)
    End Sub
    Partial Private Sub OnTypeSalesNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductKey", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ProductKey() As Integer
		Get
			Return Me._ProductKey
		End Get
		Set
			If ((Me._ProductKey = value)  _
						= false) Then
				Me.OnProductKeyChanging(value)
				Me.SendPropertyChanging
				Me._ProductKey = value
				Me.SendPropertyChanged("ProductKey")
				Me.OnProductKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryID", DbType:="VarChar(2)")>  _
	Public Property CountryID() As String
		Get
			Return Me._CountryID
		End Get
		Set
			If (String.Equals(Me._CountryID, value) = false) Then
				Me.OnCountryIDChanging(value)
				Me.SendPropertyChanging
				Me._CountryID = value
				Me.SendPropertyChanged("CountryID")
				Me.OnCountryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="VarChar(10)")>  _
	Public Property ProductID() As String
		Get
			Return Me._ProductID
		End Get
		Set
			If (String.Equals(Me._ProductID, value) = false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SAP_ProductCode", DbType:="VarChar(15)")>  _
	Public Property SAP_ProductCode() As String
		Get
			Return Me._SAP_ProductCode
		End Get
		Set
			If (String.Equals(Me._SAP_ProductCode, value) = false) Then
				Me.OnSAP_ProductCodeChanging(value)
				Me.SendPropertyChanging
				Me._SAP_ProductCode = value
				Me.SendPropertyChanged("SAP_ProductCode")
				Me.OnSAP_ProductCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(100)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsPerCase", DbType:="Decimal(5,0)")>  _
	Public Property UnitsPerCase() As System.Nullable(Of Decimal)
		Get
			Return Me._UnitsPerCase
		End Get
		Set
			If (Me._UnitsPerCase.Equals(value) = false) Then
				Me.OnUnitsPerCaseChanging(value)
				Me.SendPropertyChanging
				Me._UnitsPerCase = value
				Me.SendPropertyChanged("UnitsPerCase")
				Me.OnUnitsPerCaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PresentationID", DbType:="Int")>  _
	Public Property PresentationID() As System.Nullable(Of Integer)
		Get
			Return Me._PresentationID
		End Get
		Set
			If (Me._PresentationID.Equals(value) = false) Then
				Me.OnPresentationIDChanging(value)
				Me.SendPropertyChanging
				Me._PresentationID = value
				Me.SendPropertyChanged("PresentationID")
				Me.OnPresentationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PresentationName", DbType:="VarChar(50)")>  _
	Public Property PresentationName() As String
		Get
			Return Me._PresentationName
		End Get
		Set
			If (String.Equals(Me._PresentationName, value) = false) Then
				Me.OnPresentationNameChanging(value)
				Me.SendPropertyChanging
				Me._PresentationName = value
				Me.SendPropertyChanged("PresentationName")
				Me.OnPresentationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="Int")>  _
	Public Property GroupID() As System.Nullable(Of Integer)
		Get
			Return Me._GroupID
		End Get
		Set
			If (Me._GroupID.Equals(value) = false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupName", DbType:="VarChar(50)")>  _
	Public Property GroupName() As String
		Get
			Return Me._GroupName
		End Get
		Set
			If (String.Equals(Me._GroupName, value) = false) Then
				Me.OnGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupName = value
				Me.SendPropertyChanged("GroupName")
				Me.OnGroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceID", DbType:="Int")>  _
	Public Property SourceID() As System.Nullable(Of Integer)
		Get
			Return Me._SourceID
		End Get
		Set
			If (Me._SourceID.Equals(value) = false) Then
				Me.OnSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceID = value
				Me.SendPropertyChanged("SourceID")
				Me.OnSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceName", DbType:="VarChar(50)")>  _
	Public Property SourceName() As String
		Get
			Return Me._SourceName
		End Get
		Set
			If (String.Equals(Me._SourceName, value) = false) Then
				Me.OnSourceNameChanging(value)
				Me.SendPropertyChanging
				Me._SourceName = value
				Me.SendPropertyChanged("SourceName")
				Me.OnSourceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int")>  _
	Public Property CategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._CategoryID
		End Get
		Set
			If (Me._CategoryID.Equals(value) = false) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="VarChar(50)")>  _
	Public Property CategoryName() As String
		Get
			Return Me._CategoryName
		End Get
		Set
			If (String.Equals(Me._CategoryName, value) = false) Then
				Me.OnCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._CategoryName = value
				Me.SendPropertyChanged("CategoryName")
				Me.OnCategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubCategoryID", DbType:="Int")>  _
	Public Property SubCategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._SubCategoryID
		End Get
		Set
			If (Me._SubCategoryID.Equals(value) = false) Then
				Me.OnSubCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._SubCategoryID = value
				Me.SendPropertyChanged("SubCategoryID")
				Me.OnSubCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubCategoryName", DbType:="VarChar(50)")>  _
	Public Property SubCategoryName() As String
		Get
			Return Me._SubCategoryName
		End Get
		Set
			If (String.Equals(Me._SubCategoryName, value) = false) Then
				Me.OnSubCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._SubCategoryName = value
				Me.SendPropertyChanged("SubCategoryName")
				Me.OnSubCategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandID", DbType:="Int")>  _
	Public Property BrandID() As System.Nullable(Of Integer)
		Get
			Return Me._BrandID
		End Get
		Set
			If (Me._BrandID.Equals(value) = false) Then
				Me.OnBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._BrandID = value
				Me.SendPropertyChanged("BrandID")
				Me.OnBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandName", DbType:="VarChar(50)")>  _
	Public Property BrandName() As String
		Get
			Return Me._BrandName
		End Get
		Set
			If (String.Equals(Me._BrandName, value) = false) Then
				Me.OnBrandNameChanging(value)
				Me.SendPropertyChanging
				Me._BrandName = value
				Me.SendPropertyChanged("BrandName")
				Me.OnBrandNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubBrandID", DbType:="Int")>  _
	Public Property SubBrandID() As System.Nullable(Of Integer)
		Get
			Return Me._SubBrandID
		End Get
		Set
			If (Me._SubBrandID.Equals(value) = false) Then
				Me.OnSubBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._SubBrandID = value
				Me.SendPropertyChanged("SubBrandID")
				Me.OnSubBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubBrandName", DbType:="VarChar(50)")>  _
	Public Property SubBrandName() As String
		Get
			Return Me._SubBrandName
		End Get
		Set
			If (String.Equals(Me._SubBrandName, value) = false) Then
				Me.OnSubBrandNameChanging(value)
				Me.SendPropertyChanging
				Me._SubBrandName = value
				Me.SendPropertyChanged("SubBrandName")
				Me.OnSubBrandNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeBrandID", DbType:="Int")>  _
	Public Property TypeBrandID() As System.Nullable(Of Integer)
		Get
			Return Me._TypeBrandID
		End Get
		Set
			If (Me._TypeBrandID.Equals(value) = false) Then
				Me.OnTypeBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._TypeBrandID = value
				Me.SendPropertyChanged("TypeBrandID")
				Me.OnTypeBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeBrandName", DbType:="VarChar(50)")>  _
	Public Property TypeBrandName() As String
		Get
			Return Me._TypeBrandName
		End Get
		Set
			If (String.Equals(Me._TypeBrandName, value) = false) Then
				Me.OnTypeBrandNameChanging(value)
				Me.SendPropertyChanging
				Me._TypeBrandName = value
				Me.SendPropertyChanged("TypeBrandName")
				Me.OnTypeBrandNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeID", DbType:="Int")>  _
	Public Property SizeID() As System.Nullable(Of Integer)
		Get
			Return Me._SizeID
		End Get
		Set
			If (Me._SizeID.Equals(value) = false) Then
				Me.OnSizeIDChanging(value)
				Me.SendPropertyChanging
				Me._SizeID = value
				Me.SendPropertyChanged("SizeID")
				Me.OnSizeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeName", DbType:="VarChar(50)")>  _
	Public Property SizeName() As String
		Get
			Return Me._SizeName
		End Get
		Set
			If (String.Equals(Me._SizeName, value) = false) Then
				Me.OnSizeNameChanging(value)
				Me.SendPropertyChanging
				Me._SizeName = value
				Me.SendPropertyChanged("SizeName")
				Me.OnSizeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlavorID", DbType:="Int")>  _
	Public Property FlavorID() As System.Nullable(Of Integer)
		Get
			Return Me._FlavorID
		End Get
		Set
			If (Me._FlavorID.Equals(value) = false) Then
				Me.OnFlavorIDChanging(value)
				Me.SendPropertyChanging
				Me._FlavorID = value
				Me.SendPropertyChanged("FlavorID")
				Me.OnFlavorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlavorName", DbType:="VarChar(50)")>  _
	Public Property FlavorName() As String
		Get
			Return Me._FlavorName
		End Get
		Set
			If (String.Equals(Me._FlavorName, value) = false) Then
				Me.OnFlavorNameChanging(value)
				Me.SendPropertyChanging
				Me._FlavorName = value
				Me.SendPropertyChanged("FlavorName")
				Me.OnFlavorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active_Flag", DbType:="Bit")>  _
	Public Property Active_Flag() As System.Nullable(Of Boolean)
		Get
			Return Me._Active_Flag
		End Get
		Set
			If (Me._Active_Flag.Equals(value) = false) Then
				Me.OnActive_FlagChanging(value)
				Me.SendPropertyChanging
				Me._Active_Flag = value
				Me.SendPropertyChanged("Active_Flag")
				Me.OnActive_FlagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemOnly", DbType:="Bit")>  _
	Public Property SystemOnly() As System.Nullable(Of Boolean)
		Get
			Return Me._SystemOnly
		End Get
		Set
			If (Me._SystemOnly.Equals(value) = false) Then
				Me.OnSystemOnlyChanging(value)
				Me.SendPropertyChanging
				Me._SystemOnly = value
				Me.SendPropertyChanged("SystemOnly")
				Me.OnSystemOnlyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Flag_innovation", DbType:="Bit")>  _
	Public Property Flag_innovation() As System.Nullable(Of Boolean)
		Get
			Return Me._Flag_innovation
		End Get
		Set
			If (Me._Flag_innovation.Equals(value) = false) Then
				Me.OnFlag_innovationChanging(value)
				Me.SendPropertyChanging
				Me._Flag_innovation = value
				Me.SendPropertyChanged("Flag_innovation")
				Me.OnFlag_innovationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate_innovation", DbType:="DateTime")>  _
	Public Property StartDate_innovation() As System.Nullable(Of Date)
		Get
			Return Me._StartDate_innovation
		End Get
		Set
			If (Me._StartDate_innovation.Equals(value) = false) Then
				Me.OnStartDate_innovationChanging(value)
				Me.SendPropertyChanging
				Me._StartDate_innovation = value
				Me.SendPropertyChanged("StartDate_innovation")
				Me.OnStartDate_innovationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate_innovation", DbType:="DateTime")>  _
	Public Property EndDate_innovation() As System.Nullable(Of Date)
		Get
			Return Me._EndDate_innovation
		End Get
		Set
			If (Me._EndDate_innovation.Equals(value) = false) Then
				Me.OnEndDate_innovationChanging(value)
				Me.SendPropertyChanging
				Me._EndDate_innovation = value
				Me.SendPropertyChanged("EndDate_innovation")
				Me.OnEndDate_innovationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PricePoint", DbType:="Money")>  _
	Public Property PricePoint() As System.Nullable(Of Decimal)
		Get
			Return Me._PricePoint
		End Get
		Set
			If (Me._PricePoint.Equals(value) = false) Then
				Me.OnPricePointChanging(value)
				Me.SendPropertyChanging
				Me._PricePoint = value
				Me.SendPropertyChanged("PricePoint")
				Me.OnPricePointChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POT_StatusID", DbType:="Int")>  _
	Public Property POT_StatusID() As System.Nullable(Of Integer)
		Get
			Return Me._POT_StatusID
		End Get
		Set
			If (Me._POT_StatusID.Equals(value) = false) Then
				Me.OnPOT_StatusIDChanging(value)
				Me.SendPropertyChanging
				Me._POT_StatusID = value
				Me.SendPropertyChanged("POT_StatusID")
				Me.OnPOT_StatusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsForDistribution", DbType:="Decimal(5,0)")>  _
	Public Property UnitsForDistribution() As System.Nullable(Of Decimal)
		Get
			Return Me._UnitsForDistribution
		End Get
		Set
			If (Me._UnitsForDistribution.Equals(value) = false) Then
				Me.OnUnitsForDistributionChanging(value)
				Me.SendPropertyChanging
				Me._UnitsForDistribution = value
				Me.SendPropertyChanged("UnitsForDistribution")
				Me.OnUnitsForDistributionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeSalesID", DbType:="Int")>  _
	Public Property TypeSalesID() As System.Nullable(Of Integer)
		Get
			Return Me._TypeSalesID
		End Get
		Set
			If (Me._TypeSalesID.Equals(value) = false) Then
				Me.OnTypeSalesIDChanging(value)
				Me.SendPropertyChanging
				Me._TypeSalesID = value
				Me.SendPropertyChanged("TypeSalesID")
				Me.OnTypeSalesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeSalesName", DbType:="VarChar(50)")>  _
	Public Property TypeSalesName() As String
		Get
			Return Me._TypeSalesName
		End Get
		Set
			If (String.Equals(Me._TypeSalesName, value) = false) Then
				Me.OnTypeSalesNameChanging(value)
				Me.SendPropertyChanging
				Me._TypeSalesName = value
				Me.SendPropertyChanged("TypeSalesName")
				Me.OnTypeSalesNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Products_DM")>  _
Partial Public Class Products_DM
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductKey As Integer
	
	Private _ProductID As String
	
	Private _SAP_ProductCode As String
	
	Private _Description As String
	
	Private _Grams As System.Nullable(Of Decimal)
	
	Private _Standar_Cost As System.Nullable(Of Decimal)
	
	Private _PricePoint As System.Nullable(Of Decimal)
	
	Private _UnitsPerCase As System.Nullable(Of Decimal)
	
	Private _PresentationName As String
	
	Private _GroupName As String
	
	Private _SourceName As String
	
	Private _CategoryName As String
	
	Private _SubCategoryName As String
	
	Private _BrandName As String
	
	Private _SubBrandName As String
	
	Private _TypeBrandName As String
	
	Private _SizeName As String
	
	Private _FlavorName As String
	
	Private _PresentationID As System.Nullable(Of Integer)
	
	Private _GroupID As System.Nullable(Of Integer)
	
	Private _SourceID As System.Nullable(Of Integer)
	
	Private _CategoryID As System.Nullable(Of Integer)
	
	Private _SubCategoryID As System.Nullable(Of Integer)
	
	Private _BrandID As System.Nullable(Of Integer)
	
	Private _SubBrandID As System.Nullable(Of Integer)
	
	Private _TypeBrandID As System.Nullable(Of Integer)
	
	Private _SizeID As System.Nullable(Of Integer)
	
	Private _FlavorID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductKeyChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As String)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnSAP_ProductCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSAP_ProductCodeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnGramsChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnGramsChanged()
    End Sub
    Partial Private Sub OnStandar_CostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnStandar_CostChanged()
    End Sub
    Partial Private Sub OnPricePointChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPricePointChanged()
    End Sub
    Partial Private Sub OnUnitsPerCaseChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUnitsPerCaseChanged()
    End Sub
    Partial Private Sub OnPresentationNameChanging(value As String)
    End Sub
    Partial Private Sub OnPresentationNameChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    Partial Private Sub OnSourceNameChanging(value As String)
    End Sub
    Partial Private Sub OnSourceNameChanged()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    Partial Private Sub OnSubCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnSubCategoryNameChanged()
    End Sub
    Partial Private Sub OnBrandNameChanging(value As String)
    End Sub
    Partial Private Sub OnBrandNameChanged()
    End Sub
    Partial Private Sub OnSubBrandNameChanging(value As String)
    End Sub
    Partial Private Sub OnSubBrandNameChanged()
    End Sub
    Partial Private Sub OnTypeBrandNameChanging(value As String)
    End Sub
    Partial Private Sub OnTypeBrandNameChanged()
    End Sub
    Partial Private Sub OnSizeNameChanging(value As String)
    End Sub
    Partial Private Sub OnSizeNameChanged()
    End Sub
    Partial Private Sub OnFlavorNameChanging(value As String)
    End Sub
    Partial Private Sub OnFlavorNameChanged()
    End Sub
    Partial Private Sub OnPresentationIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPresentationIDChanged()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnSourceIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSourceIDChanged()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnSubCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubCategoryIDChanged()
    End Sub
    Partial Private Sub OnBrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBrandIDChanged()
    End Sub
    Partial Private Sub OnSubBrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubBrandIDChanged()
    End Sub
    Partial Private Sub OnTypeBrandIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeBrandIDChanged()
    End Sub
    Partial Private Sub OnSizeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSizeIDChanged()
    End Sub
    Partial Private Sub OnFlavorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFlavorIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductKey", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ProductKey() As Integer
		Get
			Return Me._ProductKey
		End Get
		Set
			If ((Me._ProductKey = value)  _
						= false) Then
				Me.OnProductKeyChanging(value)
				Me.SendPropertyChanging
				Me._ProductKey = value
				Me.SendPropertyChanged("ProductKey")
				Me.OnProductKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="VarChar(10)")>  _
	Public Property ProductID() As String
		Get
			Return Me._ProductID
		End Get
		Set
			If (String.Equals(Me._ProductID, value) = false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SAP_ProductCode", DbType:="VarChar(15)")>  _
	Public Property SAP_ProductCode() As String
		Get
			Return Me._SAP_ProductCode
		End Get
		Set
			If (String.Equals(Me._SAP_ProductCode, value) = false) Then
				Me.OnSAP_ProductCodeChanging(value)
				Me.SendPropertyChanging
				Me._SAP_ProductCode = value
				Me.SendPropertyChanged("SAP_ProductCode")
				Me.OnSAP_ProductCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(100)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Grams", DbType:="Decimal(8,4)")>  _
	Public Property Grams() As System.Nullable(Of Decimal)
		Get
			Return Me._Grams
		End Get
		Set
			If (Me._Grams.Equals(value) = false) Then
				Me.OnGramsChanging(value)
				Me.SendPropertyChanging
				Me._Grams = value
				Me.SendPropertyChanged("Grams")
				Me.OnGramsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Standar_Cost", DbType:="Money")>  _
	Public Property Standar_Cost() As System.Nullable(Of Decimal)
		Get
			Return Me._Standar_Cost
		End Get
		Set
			If (Me._Standar_Cost.Equals(value) = false) Then
				Me.OnStandar_CostChanging(value)
				Me.SendPropertyChanging
				Me._Standar_Cost = value
				Me.SendPropertyChanged("Standar_Cost")
				Me.OnStandar_CostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PricePoint", DbType:="Money")>  _
	Public Property PricePoint() As System.Nullable(Of Decimal)
		Get
			Return Me._PricePoint
		End Get
		Set
			If (Me._PricePoint.Equals(value) = false) Then
				Me.OnPricePointChanging(value)
				Me.SendPropertyChanging
				Me._PricePoint = value
				Me.SendPropertyChanged("PricePoint")
				Me.OnPricePointChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsPerCase", DbType:="Decimal(5,0)")>  _
	Public Property UnitsPerCase() As System.Nullable(Of Decimal)
		Get
			Return Me._UnitsPerCase
		End Get
		Set
			If (Me._UnitsPerCase.Equals(value) = false) Then
				Me.OnUnitsPerCaseChanging(value)
				Me.SendPropertyChanging
				Me._UnitsPerCase = value
				Me.SendPropertyChanged("UnitsPerCase")
				Me.OnUnitsPerCaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PresentationName", DbType:="VarChar(50)")>  _
	Public Property PresentationName() As String
		Get
			Return Me._PresentationName
		End Get
		Set
			If (String.Equals(Me._PresentationName, value) = false) Then
				Me.OnPresentationNameChanging(value)
				Me.SendPropertyChanging
				Me._PresentationName = value
				Me.SendPropertyChanged("PresentationName")
				Me.OnPresentationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupName", DbType:="VarChar(50)")>  _
	Public Property GroupName() As String
		Get
			Return Me._GroupName
		End Get
		Set
			If (String.Equals(Me._GroupName, value) = false) Then
				Me.OnGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupName = value
				Me.SendPropertyChanged("GroupName")
				Me.OnGroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceName", DbType:="VarChar(50)")>  _
	Public Property SourceName() As String
		Get
			Return Me._SourceName
		End Get
		Set
			If (String.Equals(Me._SourceName, value) = false) Then
				Me.OnSourceNameChanging(value)
				Me.SendPropertyChanging
				Me._SourceName = value
				Me.SendPropertyChanged("SourceName")
				Me.OnSourceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="VarChar(50)")>  _
	Public Property CategoryName() As String
		Get
			Return Me._CategoryName
		End Get
		Set
			If (String.Equals(Me._CategoryName, value) = false) Then
				Me.OnCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._CategoryName = value
				Me.SendPropertyChanged("CategoryName")
				Me.OnCategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubCategoryName", DbType:="VarChar(50)")>  _
	Public Property SubCategoryName() As String
		Get
			Return Me._SubCategoryName
		End Get
		Set
			If (String.Equals(Me._SubCategoryName, value) = false) Then
				Me.OnSubCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._SubCategoryName = value
				Me.SendPropertyChanged("SubCategoryName")
				Me.OnSubCategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandName", DbType:="VarChar(50)")>  _
	Public Property BrandName() As String
		Get
			Return Me._BrandName
		End Get
		Set
			If (String.Equals(Me._BrandName, value) = false) Then
				Me.OnBrandNameChanging(value)
				Me.SendPropertyChanging
				Me._BrandName = value
				Me.SendPropertyChanged("BrandName")
				Me.OnBrandNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubBrandName", DbType:="VarChar(50)")>  _
	Public Property SubBrandName() As String
		Get
			Return Me._SubBrandName
		End Get
		Set
			If (String.Equals(Me._SubBrandName, value) = false) Then
				Me.OnSubBrandNameChanging(value)
				Me.SendPropertyChanging
				Me._SubBrandName = value
				Me.SendPropertyChanged("SubBrandName")
				Me.OnSubBrandNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeBrandName", DbType:="VarChar(50)")>  _
	Public Property TypeBrandName() As String
		Get
			Return Me._TypeBrandName
		End Get
		Set
			If (String.Equals(Me._TypeBrandName, value) = false) Then
				Me.OnTypeBrandNameChanging(value)
				Me.SendPropertyChanging
				Me._TypeBrandName = value
				Me.SendPropertyChanged("TypeBrandName")
				Me.OnTypeBrandNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeName", DbType:="VarChar(50)")>  _
	Public Property SizeName() As String
		Get
			Return Me._SizeName
		End Get
		Set
			If (String.Equals(Me._SizeName, value) = false) Then
				Me.OnSizeNameChanging(value)
				Me.SendPropertyChanging
				Me._SizeName = value
				Me.SendPropertyChanged("SizeName")
				Me.OnSizeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlavorName", DbType:="VarChar(50)")>  _
	Public Property FlavorName() As String
		Get
			Return Me._FlavorName
		End Get
		Set
			If (String.Equals(Me._FlavorName, value) = false) Then
				Me.OnFlavorNameChanging(value)
				Me.SendPropertyChanging
				Me._FlavorName = value
				Me.SendPropertyChanged("FlavorName")
				Me.OnFlavorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PresentationID", DbType:="Int")>  _
	Public Property PresentationID() As System.Nullable(Of Integer)
		Get
			Return Me._PresentationID
		End Get
		Set
			If (Me._PresentationID.Equals(value) = false) Then
				Me.OnPresentationIDChanging(value)
				Me.SendPropertyChanging
				Me._PresentationID = value
				Me.SendPropertyChanged("PresentationID")
				Me.OnPresentationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="Int")>  _
	Public Property GroupID() As System.Nullable(Of Integer)
		Get
			Return Me._GroupID
		End Get
		Set
			If (Me._GroupID.Equals(value) = false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceID", DbType:="Int")>  _
	Public Property SourceID() As System.Nullable(Of Integer)
		Get
			Return Me._SourceID
		End Get
		Set
			If (Me._SourceID.Equals(value) = false) Then
				Me.OnSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceID = value
				Me.SendPropertyChanged("SourceID")
				Me.OnSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int")>  _
	Public Property CategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._CategoryID
		End Get
		Set
			If (Me._CategoryID.Equals(value) = false) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubCategoryID", DbType:="Int")>  _
	Public Property SubCategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._SubCategoryID
		End Get
		Set
			If (Me._SubCategoryID.Equals(value) = false) Then
				Me.OnSubCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._SubCategoryID = value
				Me.SendPropertyChanged("SubCategoryID")
				Me.OnSubCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandID", DbType:="Int")>  _
	Public Property BrandID() As System.Nullable(Of Integer)
		Get
			Return Me._BrandID
		End Get
		Set
			If (Me._BrandID.Equals(value) = false) Then
				Me.OnBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._BrandID = value
				Me.SendPropertyChanged("BrandID")
				Me.OnBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubBrandID", DbType:="Int")>  _
	Public Property SubBrandID() As System.Nullable(Of Integer)
		Get
			Return Me._SubBrandID
		End Get
		Set
			If (Me._SubBrandID.Equals(value) = false) Then
				Me.OnSubBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._SubBrandID = value
				Me.SendPropertyChanged("SubBrandID")
				Me.OnSubBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeBrandID", DbType:="Int")>  _
	Public Property TypeBrandID() As System.Nullable(Of Integer)
		Get
			Return Me._TypeBrandID
		End Get
		Set
			If (Me._TypeBrandID.Equals(value) = false) Then
				Me.OnTypeBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._TypeBrandID = value
				Me.SendPropertyChanged("TypeBrandID")
				Me.OnTypeBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeID", DbType:="Int")>  _
	Public Property SizeID() As System.Nullable(Of Integer)
		Get
			Return Me._SizeID
		End Get
		Set
			If (Me._SizeID.Equals(value) = false) Then
				Me.OnSizeIDChanging(value)
				Me.SendPropertyChanging
				Me._SizeID = value
				Me.SendPropertyChanged("SizeID")
				Me.OnSizeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlavorID", DbType:="Int")>  _
	Public Property FlavorID() As System.Nullable(Of Integer)
		Get
			Return Me._FlavorID
		End Get
		Set
			If (Me._FlavorID.Equals(value) = false) Then
				Me.OnFlavorIDChanging(value)
				Me.SendPropertyChanging
				Me._FlavorID = value
				Me.SendPropertyChanged("FlavorID")
				Me.OnFlavorIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
