'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SalesDataMart")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertM01_Brand(instance As M01_Brand)
    End Sub
  Partial Private Sub UpdateM01_Brand(instance As M01_Brand)
    End Sub
  Partial Private Sub DeleteM01_Brand(instance As M01_Brand)
    End Sub
  Partial Private Sub InsertM01_Category(instance As M01_Category)
    End Sub
  Partial Private Sub UpdateM01_Category(instance As M01_Category)
    End Sub
  Partial Private Sub DeleteM01_Category(instance As M01_Category)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.My.MySettings.Default.SalesDataMartConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property M01_Brands() As System.Data.Linq.Table(Of M01_Brand)
		Get
			Return Me.GetTable(Of M01_Brand)
		End Get
	End Property
	
	Public ReadOnly Property M01_Categories() As System.Data.Linq.Table(Of M01_Category)
		Get
			Return Me.GetTable(Of M01_Category)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.M01_Brand")>  _
Partial Public Class M01_Brand
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BrandID As Integer
	
	Private _BrandName As String
	
	Private _Active_Flag As System.Nullable(Of Boolean)
	
	Private _SystemOnly As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBrandIDChanged()
    End Sub
    Partial Private Sub OnBrandNameChanging(value As String)
    End Sub
    Partial Private Sub OnBrandNameChanged()
    End Sub
    Partial Private Sub OnActive_FlagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActive_FlagChanged()
    End Sub
    Partial Private Sub OnSystemOnlyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSystemOnlyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BrandID() As Integer
		Get
			Return Me._BrandID
		End Get
		Set
			If ((Me._BrandID = value)  _
						= false) Then
				Me.OnBrandIDChanging(value)
				Me.SendPropertyChanging
				Me._BrandID = value
				Me.SendPropertyChanged("BrandID")
				Me.OnBrandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandName", DbType:="VarChar(50)")>  _
	Public Property BrandName() As String
		Get
			Return Me._BrandName
		End Get
		Set
			If (String.Equals(Me._BrandName, value) = false) Then
				Me.OnBrandNameChanging(value)
				Me.SendPropertyChanging
				Me._BrandName = value
				Me.SendPropertyChanged("BrandName")
				Me.OnBrandNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active_Flag", DbType:="Bit")>  _
	Public Property Active_Flag() As System.Nullable(Of Boolean)
		Get
			Return Me._Active_Flag
		End Get
		Set
			If (Me._Active_Flag.Equals(value) = false) Then
				Me.OnActive_FlagChanging(value)
				Me.SendPropertyChanging
				Me._Active_Flag = value
				Me.SendPropertyChanged("Active_Flag")
				Me.OnActive_FlagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemOnly", DbType:="Bit")>  _
	Public Property SystemOnly() As System.Nullable(Of Boolean)
		Get
			Return Me._SystemOnly
		End Get
		Set
			If (Me._SystemOnly.Equals(value) = false) Then
				Me.OnSystemOnlyChanging(value)
				Me.SendPropertyChanging
				Me._SystemOnly = value
				Me.SendPropertyChanged("SystemOnly")
				Me.OnSystemOnlyChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.M01_Category")>  _
Partial Public Class M01_Category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryID As Integer
	
	Private _CategoryName As String
	
	Private _Active_Flag As System.Nullable(Of Boolean)
	
	Private _SystemOnly As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    Partial Private Sub OnActive_FlagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActive_FlagChanged()
    End Sub
    Partial Private Sub OnSystemOnlyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSystemOnlyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CategoryID() As Integer
		Get
			Return Me._CategoryID
		End Get
		Set
			If ((Me._CategoryID = value)  _
						= false) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="VarChar(50)")>  _
	Public Property CategoryName() As String
		Get
			Return Me._CategoryName
		End Get
		Set
			If (String.Equals(Me._CategoryName, value) = false) Then
				Me.OnCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._CategoryName = value
				Me.SendPropertyChanged("CategoryName")
				Me.OnCategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active_Flag", DbType:="Bit")>  _
	Public Property Active_Flag() As System.Nullable(Of Boolean)
		Get
			Return Me._Active_Flag
		End Get
		Set
			If (Me._Active_Flag.Equals(value) = false) Then
				Me.OnActive_FlagChanging(value)
				Me.SendPropertyChanging
				Me._Active_Flag = value
				Me.SendPropertyChanged("Active_Flag")
				Me.OnActive_FlagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemOnly", DbType:="Bit")>  _
	Public Property SystemOnly() As System.Nullable(Of Boolean)
		Get
			Return Me._SystemOnly
		End Get
		Set
			If (Me._SystemOnly.Equals(value) = false) Then
				Me.OnSystemOnlyChanging(value)
				Me.SendPropertyChanging
				Me._SystemOnly = value
				Me.SendPropertyChanged("SystemOnly")
				Me.OnSystemOnlyChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
